#include "SET.h"


set::set(int n)
{
    this->n = 0;
    this->size = max_size;
    this->data = new int[size];
}

set::~set()
{
    delete [] data;
}

set::set(const set &s)
{
    this->n = s.n;
    this->size = s.size;
    this->data = new int[s.size];
    for (int i = 0; i < s.n; i++) {
        this->data[i] = s.data[i];
    }
}

set::set(int soNguyen[], int size)
{
    this->n = size;
    this->size = max_size;
    this->data = new int[this->size];
    for (int i = 0; i < this->size; i++) {
        this->data[i] = soNguyen[i];
    }
}

// set set::operator+(int x)
// {
//     if (this->n == this->size) {
//         cout << "Mang da het cho. \n";
//         return *this; 
//     }
//     set res(*this);
//     res.data[res.n++] = x;
//     return res;
// }

set set::operator+(int x) {
    if (this->n == this->size) {
        cout << "Mang da het cho. \n";
        return *this; 
    }

    // T·∫°o ƒë·ªëi t∆∞·ª£ng m·ªõi ƒë·ªÉ l∆∞u k·∫øt qu·∫£ sau khi th√™m ph·∫ßn t·ª≠ x v√†o
    set res; 
    res.n = this->n;
    res.size = this->size;
    res.data = new int[res.size];

    for (int i = 0; i < this->n; i++) {
        res.data[i] = this->data[i];
    }

    res.data[res.n++] = x;
    return res; 
}

set set::operator-(int x)
{
    int pos = -1;
    for (int i = 0; i < this->n; i++) {
        if (this->data[i] == x) {
            pos = i; 
            break; 
        }
    }
    if (pos == -1) {
        cout << "Khong tim thay " << x << " trong mang. \n";
        return *this;
    } else {
        for (int i = pos; i < n - 1; i++) {
            this->data[i] = this->data[i + 1]; 
        }
        n--; 
    }
    return *this; 
}
ostream &operator << (ostream &out, const set &s)
{
    for (int i = 0; i < s.n; i++) {
        out << s.data[i] << ' ';
    }
    out << endl;
    return out;
}

set &set::operator = (const set &s)
{
    if (this == &s) {
        return *this;
    }

    delete [] this->data;

    this->n = s.n;
    this->size = s.size;
    this->data = new int[s.n];

    for (int i = 0; i < s.n; i++) {
        this->data[i] = s.data[i];
    }
    return *this;
}

// H·ª£p c·ªßa 2 t·∫≠p
/*
- H·ª£p c·ªßa hai t·∫≠p (c√≤n g·ªçi l√† ph√©p h·ª£p) l√† m·ªôt kh√°i ni·ªám trong l√Ω thuy·∫øt t·∫≠p h·ª£p, 
th·ªÉ hi·ªán t·∫≠p h·ª£p t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ thu·ªôc √≠t nh·∫•t m·ªôt trong hai t·∫≠p.

V√≠ d·ª•:
N·∫øu A={1,2,3} v√† B={3,4,5},  th√¨ h·ª£p c·ªßa A v√† ùêµ s·∫Ω l√†: A‚à™B={1,2,3,4,5}

*/

set set::operator+(set &other)
{
    int danhDau[1005] = {0};
    set res; // ƒê·ªëi t∆∞·ª£ng set k·∫øt qu·∫£

    for (int i = 0; i < this->n; i++) {
        res.data[res.n++] = this->data[i]; // Th√™m ph·∫ßn t·ª≠ c·ªßa m·∫£ng hi·ªán t·∫°i v√†o k·∫øt qu·∫£
        danhDau[this->data[i]] = 1; // ƒê√°nh d·∫•u c√°c ph·∫ßn t·ª≠ ƒë√£ xu·∫•t hi·ªán trong k·∫øt qu·∫£
    }

    for (int i = 0; i < other.n; i++) {
        if (danhDau[other.data[i]] == 0) {
            // Ki·ªÉm tra ph·∫ßn t·ª≠ ƒë√£ c√≥ trong m·∫£ng ƒë√°nh d·∫•u ch∆∞a
            res.data[res.n++] = other.data[i]; // ch∆∞a c√≥ th√¨ th√™m v√†o
            danhDau[other.data[i]] = 1; // ƒê√°nh d·∫•u ƒë√£ xu·∫•t hi·ªán
        } 
    }
    return res;
}

/*
- Hi·ªáu c·ªßa hai t·∫≠p h·ª£p l√† t·∫≠p h·ª£p ch·ª©a c√°c ph·∫ßn t·ª≠ ch·ªâ c√≥ trong t·∫≠p h·ª£p ƒë·∫ßu ti√™n nh∆∞ng kh√¥ng
c√≥ trong t·∫≠p h·ª£p th·ª© hai. K√Ω hi·ªáu c·ªßa hi·ªáu hai t·∫≠p h·ª£p A v√† B th∆∞·ªùng l√† A‚àíB ho·∫∑c A‚àñB.

- V√≠ d·ª•: 
T·∫≠p h·ª£p A = {1, 2, 3, 4, 5}
T·∫≠p h·ª£p B = {3, 4, 6}
=> Hi·ªáu c·ªßa A v√† B l√†: A - B = {1, 2, 5}
*/
set set::operator-(set &other)
{
    int danhDau[1005] = {0};
    set res; 

    for (int i = 0; i < other.n; i++) {
        danhDau[other.data[i]] = 1;
    }

    for (int i = 0; i < this->n; i++) {
        if (danhDau[this->data[i]] == 0) {
            res.data[res.n++] = this->data[i];
        }
    }
    return res;
}

// Giao c·ªßa 2 t·∫≠p h·ª£p
set set::operator*(set &other)
{
    int danhDau[1005] = {0};
    set res;

    for (int i = 0; i < this->n; i++) {
        danhDau[this->data[i]] = 1; 
    }

    for (int i = 0; i < other.n; i++) {
        if (danhDau[other.data[i]]) {
            // Ki·ªÉm tra trong m·∫£ng A c√≥ ph·∫ßn t·ª≠ ƒëang x√©t hay ch∆∞a.
            res.data[res.n++] = other.data[i]; // N·∫øu c√≥ th√¨ th√™m v√†o m·∫£ng k·∫øt qu·∫£
        }
    }
    return res;
}

// Toan tu []
int set::operator[] (unsigned int x)
{
    if (this->n == 0) {
        cout << "Array empty. \n";
    }
    return this->data[x];
}

// Toan tu ()
bool set::operator() (int x)
{
    for (int i = 0; i < this->n; i++){
        if (this->data[i] == x) {
            cout << x << " nam o vi tri thu " << i + 1 << " trong mang. \n";
            return true;
        }
    }
    cout << x << " khong nam trong mang. \n";
    return false;
}